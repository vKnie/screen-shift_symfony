{% extends 'base.html.twig' %}
{% block title %}Slideshow{% endblock %}
{% block body %}
    <style>
        body {
            background: #000;
            overflow: hidden;
        }
        
        .slide {
            transition: opacity 1s ease-in-out;
            opacity: 0;
        }
        
        .slide.active {
            opacity: 1;
        }
        
        .slide img {
            object-fit: contain;
        }
    </style>

    <div class="position-fixed top-0 start-0 w-100 vh-100 d-flex align-items-center justify-content-center" id="slideshow-container">
        {% if pictures is not empty %}
            {% set sortedPictures = pictures|sort((a, b) => a.position <=> b.position) %}
            {% for picture in sortedPictures %}
                {% if picture.imageName %}
                    <div class="slide position-absolute w-100 h-100 d-flex align-items-center justify-content-center" 
                         data-delay="{{ picture.delay }}"
                         data-bg-color="{{ picture.backgroundColor|default('#000') }}"
                         data-position="{{ picture.position }}"
                         style="background-color: {{ picture.backgroundColor|default('#000') }};">
                        <img src="{{ asset('uploads/pictures/' ~ picture.imageName) }}" class="w-100 h-100" alt="">
                    </div>
                {% endif %}
            {% endfor %}
        {% endif %}
    </div>

    <script>
        class Slideshow {
            constructor(screenId) {
                this.screenId = screenId;
                this.slides = [];
                this.currentSlide = 0;
                this.timeoutId = null;
                this.init();
                this.startPolling();
            }

            init() {
                this.updateSlides();
                if (this.slides.length > 0) {
                    this.showSlide(0);
                    this.scheduleNextSlide();
                }
            }

            updateSlides() {
                this.slides = document.querySelectorAll('.slide');
            }

            showSlide(index) {
                console.log(`Affichage de la slide ${index}`);
                this.slides.forEach(slide => slide.classList.remove('active'));
                if (this.slides[index]) {
                    this.slides[index].classList.add('active');
                    
                    // Optionnel : changer aussi la couleur de fond du body
                    const bgColor = this.slides[index].getAttribute('data-bg-color');
                    if (bgColor) {
                        document.body.style.backgroundColor = bgColor;
                    }
                    
                    console.log(`Slide ${index} active, delay: ${this.slides[index].getAttribute('data-delay')}s`);
                }
            }

            scheduleNextSlide() {
                if (this.slides.length === 0) return;
                
                const currentDelay = parseInt(this.slides[this.currentSlide].getAttribute('data-delay')) * 1000;
                
                this.timeoutId = setTimeout(() => {
                    this.currentSlide = (this.currentSlide + 1) % this.slides.length;
                    this.showSlide(this.currentSlide);
                    this.scheduleNextSlide();
                }, currentDelay);
            }

            restart() {
                // Arrêter le slideshow actuel
                if (this.timeoutId) {
                    clearTimeout(this.timeoutId);
                    this.timeoutId = null;
                }
                
                // Réinitialiser
                this.currentSlide = 0;
                this.updateSlides();
                
                if (this.slides.length > 0) {
                    this.showSlide(0);
                    this.scheduleNextSlide();
                }
            }

            // Polling pour vérifier les nouvelles images
            async startPolling() {
                setInterval(async () => {
                    try {
                        console.log('Vérification des mises à jour...');
                        const response = await fetch(`/screen/${this.screenId}/check-updates`);
                        const data = await response.json();
                        
                        console.log('Réponse:', data);
                        
                        if (data.hasUpdates) {
                            console.log('Mises à jour détectées, rechargement des slides...');
                            await this.loadNewSlides();
                        }
                    } catch (error) {
                        console.error('Erreur lors de la vérification des mises à jour:', error);
                    }
                }, 5000); // Vérifier toutes les 5 secondes
            }

            async loadNewSlides() {
                try {
                    console.log('Chargement des nouvelles slides...');
                    const response = await fetch(`/screen/${this.screenId}/get-slides`);
                    const html = await response.text();
                    
                    // Remplacer le contenu du container
                    document.getElementById('slideshow-container').innerHTML = html;
                    
                    console.log('Nouvelles slides chargées, redémarrage...');
                    // Redémarrer le slideshow
                    this.restart();
                } catch (error) {
                    console.error('Erreur lors du chargement des nouvelles slides:', error);
                }
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Récupérer l'ID du screen depuis l'URL ou une variable
            const screenId = {{ screen.id }};
            new Slideshow(screenId);
        });
    </script>
{% endblock %}